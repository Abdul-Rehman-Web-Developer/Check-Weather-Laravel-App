<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use DB;

class UserController extends Controller
{
    public function get_access_token(Request $request){

 		$user=DB::table('users')->where('email',$request->email)->first();
		if(!$user){
			return response()->json("No user account has been found against the provided email id.", 409);
    	}
		if (!Hash::check($request->password, $user->password)){
            return response()->json("Password does not match.", 409);
        }

       	$access_token=$user->access_token;
       	return response()->json(['message'=>"Kindly save the below given access token with you for future use. <br> <b style='color:blue'>$access_token</b>"], 200);


    }

    public function register_user(Request $request){
    	@parent::isFieldSet($request,'email','Email Address');
        @parent::isEmpty($request->email,'Email Address');
        @parent::validateEmail($request->email,'Email Address');
    	@parent::haveMaxLength(1000,$request->email,'Email Address');

        @parent::isFieldSet($request,'password','Password');
        @parent::isEmpty($request->password,'Password');
        @parent::haveMinLength(8,$request->password,'Email Address');
        @parent::haveMaxLength(200,$request->password,'Email Address');

        if(DB::table('users')->where('email',trim($request->email))->first()){
            return response()->json('A user account with the following Email Address has already been created.', 409);
        }

        $password=Hash::make($request->password);
        $access_token=$this->generateToken();
	    $added_user_id=DB::table('users')->insertGetId( [                                           
                                        'email' => trim($request->email),                                                                                                                     
                                        'password' => $password,                                                                                                             
                                        'access_token' => $access_token,                                                                                                              
                                    ], 'id'
        );

        if( !DB::table('users')->where('id',$added_user_id)->first() ){
            return response()->json('Error occured during your Account Registration, Please try again', 409);
        }


       	return response()->json(['message'=>"Your user account has successfully been created.Kindly save the below given access token with you for future use. <br> <b style='color:blue'>$access_token</b>"], 200);

        
    }

    public function recover_account(Request $request){
    	@parent::isFieldSet($request,'email','Email Address');
        @parent::isEmpty($request->email,'Email Address');
        @parent::validateEmail($request->email,'Email Address');
        @parent::haveMaxLength(1000,$request->email,'Email Address');

        $user=DB::table('users')->where('email',$request->email)->first();
		if(!$user){
			return response()->json("No user account has been found against the provided email address.", 409);
        }
                

		$recovery_link="<a href='".route('update_password', 'access_token='.urlencode($user->access_token))."' style='display:block;width:300px;margin:50px auto;padding:20px;font-size:25px;background-color:#0054ff;color:white;text-align:center;text-decoration:none;font-family:arial;font-weight:bold;border-radius:5px'>Recover Account</a>"; 
        $message="
            <div style='clear:both;text-align:center;padding:10px;border-bottom:1px solid silver;background:#ebebe0;font-family:arial;margin-top:10px'>
                User Account Recovery Alert
            </div>
            <p style='font-size:17px;text-align:center;padding-top:30px'>Dear User, complete your account recovery process by clicking the underline button </p>
            $recovery_link 
        ";
        
        $email_message=@parent::passwordRecoveryEmailHtml($message);
        $email_subject="User Account Recovery Alert (Auto generated by Check Weather Web Portal)";
            
        if(@parent::sendHtmlEmailForPasswordRecovery($user->email,$email_subject,$email_message) == false){
            return response()->json('Error in sending Account Recovery email, Please try again', 409);
        }
         
        return response()->json(['message'=>"An Account Recovery email has been sent at <bold style='color:blue'>".$user->email."</bold> <br> Kindly follow the instructions given in the email body."], 200);
    }

    public function update_password(Request $request){
    	$user=DB::table('users')->where('access_token',$request->access_token)->first();

	 	if(!$user){
    		return redirect()->route('home');
    	}
    	
        return view('pages.update_password',['access_token'=>$request->access_token]);
    }

    public function update_user_password(Request $request){
    	$user=DB::table('users')->where('access_token',$request->access_token)->first();
		if(!$user){
            return response()->json("invalid access token", 409);
        }
        
        @parent::haveMinLength(8,$request->password,'New Password');
        @parent::haveMaxLength(200,$request->password,'New Password');
        $password=Hash::make($request->password);
        $new_token=$this->generateToken();
		
		try{
		 DB::table('users')
                ->where('id', $user->id)
                ->update([
                      'access_token' =>$new_token,
                      'password' =>$password,                                         
                ]);
	    }catch(\Illuminate\Database\QueryException $e) {
 	        return response()->json('Error in updating User Password, please try again', 409);
		}

        return response()->json(['message'=>"Your user account password has successfully been updated, use your new password for future use."], 200);
    }
    
    protected function generateToken() { 
        $access_token=@parent::generateAlphaNumericRandomString(20);
        if(DB::table('users')->where('access_token',$access_token)->first()){    
         $access_token=$this->generateToken();    
        }  
        return $access_token;
    } 


}
